#!/bin/bash
SCRIPT_DIR=$(cd $(dirname $0) && pwd)
cd $SCRIPT_DIR
DOCKER_COMPOSE_FILE="$SCRIPT_DIR/docker-compose.yml"
DOCKER_COMPOSE_DEV_FILE="$SCRIPT_DIR/etc/docker-compose.dev.yml"
TOKEN_LIST_FILE="$SCRIPT_DIR/src/app/token_list.txt"
UID=$(id -u)
GID=$(id -g)
DOCKER_GID=$(cat /etc/group | grep docker | cut -d ":" -f 3)
PIP_PACKAGES="coverage Flask PyYAML uWSGI requests yq"

function show_base_usage() {
  cat <<EOS
sapporo-service is a set of management commands for SAPPORO-service.

Usage:
  sapporo-service up [-p <PORT>] [-l DEBUG|INFO] [-d --debug] [--enable-get-runs] [--enable-token-auth] [-h]
  sapporo-service down
  sapporo-service clean
  sapporo-service token [-h]
  sapporo-service token generate
  sapporo-service token show
  sapporo-service dev (up|down|clean|freeze|build|test) [-h]

Option:
  -h, --help                  Print usage.
  -v, --version               Print version.
EOS
}

function show_version() {
  grep 'suecharo/sapporo-service' $DOCKER_COMPOSE_FILE | cut -d ':' -f 3
}

function check_docker() {
  if !(type "docker" >/dev/null 2>&1); then
    echo "[FATAL] Please install docker."
    exit 1
  else
    if !(pgrep -f "docker" >/dev/null 2>&1); then
      echo "[FATAL] The docker engine does not seem to be running."
      exit 1
    fi
  fi
}

function check_docker_compose() {
  if !(type "docker-compose" >/dev/null 2>&1); then
    echo "[FATAL] Please install docker-compose."
    exit 1
  fi
}

function show_service_up_usage() {
  cat <<EOS
Usage:
  sapporo-service up [-p <PORT>] [-l DEBUG|INFO] [--enable-get-runs] [--enable-token-auth] [-h]

Option:
  -d, --debug                 Use Flask debug mode (default False).
  -p, --port PORT             Set the host TCP/IP port (default 1122).
  -l, --log-level INFO|DEBUG  Set log level (default INFO).
  --enable-get-runs           Enable get runs (default False).
  --enable-token-auth         Enable token auth (default False).
  -h, --help                  Print usage.
EOS
}

function service_up() {
  while [[ $# > 0 ]]; do
    case $1 in
    "-h" | "--help")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_service_up_usage
        exit 1
      fi
      show_service_up_usage
      exit 0
      ;;
    "-d" | "--debug")
      SAPPORO_SERVICE_DEBUG="True"
      shift 1
      ;;
    "-p" | "--port")
      if [[ -z $2 ]]; then
        printf "[FATAL] Please enter the PORT num.\n\n"
        show_service_up_usage
        exit 1
      fi
      expr $2 + 1 >/dev/null 2>&1
      if [[ $? -ge 2 ]]; then
        printf "[FATAL] Please enter int type for the PORT num.\n\n"
        show_service_up_usage
        exit 1
      fi
      if [[ $2 -lt 1 ]]; then
        printf "[FATAL] PORT num must be greater than 1.\n\n"
        show_service_up_usage
        exit 1
      fi
      SAPPORO_SERVICE_PORT=$2
      shift 2
      ;;
    "-l" | "--log-level")
      if [[ -z $2 ]]; then
        printf "[FATAL] Please enter the LOG_LEVEL(INFO|DEBUG).\n\n"
        show_service_up_usage
        exit 1
      fi
      if [[ "$2" != "INFO" && "$2" != "DEBUG" ]]; then
        printf "[FATAL] Please enter the LOG_LEVEL(INFO|DEBUG).\n\n"
        show_service_up_usage
        exit 1
      fi
      SAPPORO_SERVICE_LOG_LEVEL=$2
      shift 2
      ;;
    "--enable-get-runs")
      SAPPORO_SERVICE_ENABLE_GET_RUNS="True"
      shift 1
      ;;
    "--enable-token-auth")
      SAPPORO_SERVICE_ENABLE_TOKEN_AUTH="True"
      shift 1
      ;;
    -*)
      printf "[FATAL] Unexpected Option: $1\n\n"
      show_service_up_usage
      exit 1
      ;;
    *)
      printf "[FATAL] Unexpected Args: $1\n\n"
      show_service_up_usage
      exit 1
      ;;
    esac
  done
  check_docker
  check_docker_compose

  printf "Start SAPPORO-service up...\n\n"
  cat <<EOS
  Debug              : ${SAPPORO_SERVICE_DEBUG:-False}
  Port               : ${SAPPORO_SERVICE_PORT:-1122}
  Log Level          : ${SAPPORO_SERVICE_LOG_LEVEL:-INFO}
  Enable Get Runs    : ${SAPPORO_SERVICE_ENABLE_GET_RUNS:-False}
  Enable Token Auth  : ${SAPPORO_SERVICE_ENABLE_TOKEN_AUTH:-False}
EOS
  printf "\n"
  if [[ $(docker network ls | grep 'sapporo-network' | wc -l) == 0 ]]; then
    echo "Creating the Docker network: sapporo-network"
    docker network create sapporo-network
  fi
  PWD=$SCRIPT_DIR \
    UID=$UID \
    GID=$GID \
    DOCKER_GID=$DOCKER_GID \
    SAPPORO_SERVICE_DEBUG=${SAPPORO_SERVICE_DEBUG:-False} \
    SAPPORO_SERVICE_PORT=${SAPPORO_SERVICE_PORT:-1122} \
    SAPPORO_SERVICE_LOG_LEVEL=${SAPPORO_SERVICE_LOG_LEVEL:-INFO} \
    SAPPORO_SERVICE_ENABLE_GET_RUNS=${SAPPORO_SERVICE_ENABLE_GET_RUNS:-False} \
    SAPPORO_SERVICE_ENABLE_TOKEN_AUTH=${SAPPORO_SERVICE_ENABLE_TOKEN_AUTH:-False} \
    docker-compose up -d
  while [[ ! -e "$SCRIPT_DIR/etc/uwsgi/uwsgi.sock" ]]; do
    sleep 2s
    echo "Waiting for SAPPORO-service to start..."
  done
  printf "\nPlease try:\n\n"
  echo "    $ curl -X GET localhost:${SAPPORO_SERVICE_PORT:-1122}/service-info"
  printf "\n"
  printf "Finish SAPPORO-service up...\n"
  exit 0
}

function service_down() {
  check_docker
  check_docker_compose
  printf "Start SAPPORO-service down...\n"
  docker-compose down
  printf "Finish SAPPORO-service down...\n"
  exit 0
}

function service_clean() {
  printf "Start SAPPORO-service clean...\n"
  rm -rf $SCRIPT_DIR/etc/nginx/cache/*
  rm -rf $SCRIPT_DIR/etc/nginx/run/*
  rm -rf $SCRIPT_DIR/etc/uwsgi/uwsgi.sock
  rm -rf $SCRIPT_DIR/log/app/*
  rm -rf $SCRIPT_DIR/log/nginx/*
  rm -rf $SCRIPT_DIR/run/*
  rm -rf $SCRIPT_DIR/src/app/secret_key.txt
  rm -rf $SCRIPT_DIR/src/app/token_list.txt
  find $SCRIPT_DIR/src -type d | grep pycache | xargs rm -rf
  printf "Finish SAPPORO-service clean...\n"
  exit 0
}

function show_service_token_usage() {
  cat <<EOS
Usage:
  sapporo-service token generate
  sapporo-service token show

Option:
  -h, --help                  Print usage.
EOS
}

function service_token_generate() {
  TOKEN=$(head /dev/urandom | md5sum | cut -d ' ' -f 1)
  echo $TOKEN >>$TOKEN_LIST_FILE
  printf "Generated token:\n\n"
  echo "    $TOKEN"
  printf "\n"
  exit 0
}

function service_token_show() {
  printf "Token list:\n\n"
  while read line; do
    echo "    $line"
  done <$TOKEN_LIST_FILE
  printf "\n"
  exit 0
}

function service_token() {
  if [[ $# == 0 ]]; then
    show_service_token_usage
    exit 1
  fi

  while [[ $# > 0 ]]; do
    case $1 in
    "-h" | "--help")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_service_token_usage
        exit 1
      fi
      show_service_token_usage
      exit 0
      ;;
    "generate")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_service_token_usage
        exit 1
      fi
      service_token_generate
      ;;
    "show")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_service_token_usage
        exit 1
      fi
      service_token_show
      ;;
    -*)
      printf "[FATAL] Unexpected Option: $1\n\n"
      show_service_token_usage
      exit 1
      ;;
    *)
      printf "[FATAL] Unexpected Args: $1\n\n"
      show_service_token_usage
      exit 1
      ;;
    esac
  done
}

function show_dev_usage() {
  cat <<EOS
Usage:
  sapporo-service dev up [-p <PORT>] [-l DEBUG|INFO] [-d --debug] [--enable-get-runs] [--enable-token-auth] [-h]
  sapporo-service dev down
  sapporo-service dev clean
  sapporo-service dev freeze
  sapporo-service dev build <version>
  sapporo-service dev test

Option:
  -h, --help                  Print usage.
EOS
}

function show_service_dev_up_usage() {
  cat <<EOS
Usage:
  sapporo-service dev up [-p <PORT>] [-l DEBUG|INFO] [--enable-get-runs] [--enable-token-auth] [-h]

Option:
  -d, --debug                 Use Flask debug mode (default True).
  -p, --port PORT             Set the host TCP/IP port (default 1122).
  -l, --log-level INFO|DEBUG  Set log level (default DEBUG).
  --enable-get-runs           Enable get runs (default True).
  --enable-token-auth         Enable token auth (default False).
  -h, --help                  Print usage.
EOS
}

function service_dev_up() {
  while [[ $# > 0 ]]; do
    case $1 in
    "-h" | "--help")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_service_dev_up_usage
        exit 1
      fi
      show_service_dev_up_usage
      exit 0
      ;;
    "-d" | "--debug")
      SAPPORO_SERVICE_DEBUG="True"
      shift 1
      ;;
    "-p" | "--port")
      if [[ -z $2 ]]; then
        printf "[FATAL] Please enter the PORT num.\n\n"
        show_service_dev_up_usage
        exit 1
      fi
      expr $2 + 1 >/dev/null 2>&1
      if [[ $? -ge 2 ]]; then
        printf "[FATAL] Please enter int type for the PORT num.\n\n"
        show_service_dev_up_usage
        exit 1
      fi
      if [[ $2 -lt 1 ]]; then
        printf "[FATAL] PORT num must be greater than 1.\n\n"
        show_service_dev_up_usage
        exit 1
      fi
      SAPPORO_SERVICE_PORT=$2
      shift 2
      ;;
    "-l" | "--log-level")
      if [[ -z $2 ]]; then
        printf "[FATAL] Please enter the LOG_LEVEL(INFO|DEBUG).\n\n"
        show_service_dev_up_usage
        exit 1
      fi
      if [[ "$2" != "INFO" && "$2" != "DEBUG" ]]; then
        printf "[FATAL] Please enter the LOG_LEVEL(INFO|DEBUG).\n\n"
        show_service_dev_up_usage
        exit 1
      fi
      SAPPORO_SERVICE_LOG_LEVEL=$2
      shift 2
      ;;
    "--enable-get-runs")
      SAPPORO_SERVICE_ENABLE_GET_RUNS="True"
      shift 1
      ;;
    "--enable-token-auth")
      SAPPORO_SERVICE_ENABLE_TOKEN_AUTH="True"
      shift 1
      ;;
    -*)
      printf "[FATAL] Unexpected Option: $1\n\n"
      show_service_dev_up_usage
      exit 1
      ;;
    *)
      printf "[FATAL] Unexpected Args: $1\n\n"
      show_service_dev_up_usage
      exit 1
      ;;
    esac
  done
  check_docker
  check_docker_compose
  cd $SCRIPT_DIR/etc

  printf "Start SAPPORO-service dev up...\n\n"
  cat <<EOS
  Debug              : ${SAPPORO_SERVICE_DEBUG:-True}
  Port               : ${SAPPORO_SERVICE_PORT:-1122}
  Log Level          : ${SAPPORO_SERVICE_LOG_LEVEL:-DEBUG}
  Enable Get Runs    : ${SAPPORO_SERVICE_ENABLE_GET_RUNS:-True}
  Enable Token Auth  : ${SAPPORO_SERVICE_ENABLE_TOKEN_AUTH:-False}
EOS
  printf "\n"
  if [[ $(docker network ls | grep 'sapporo-network' | wc -l) == 0 ]]; then
    echo "Creating the Docker network: sapporo-network"
    docker network create sapporo-network
  fi
  PWD=$SCRIPT_DIR/etc \
    UID=$UID \
    GID=$GID \
    DOCKER_GID=$DOCKER_GID \
    SAPPORO_SERVICE_DEBUG=${SAPPORO_SERVICE_DEBUG:-True} \
    SAPPORO_SERVICE_PORT=${SAPPORO_SERVICE_PORT:-1122} \
    SAPPORO_SERVICE_LOG_LEVEL=${SAPPORO_SERVICE_LOG_LEVEL:-DEBUG} \
    SAPPORO_SERVICE_ENABLE_GET_RUNS=${SAPPORO_SERVICE_ENABLE_GET_RUNS:-True} \
    SAPPORO_SERVICE_ENABLE_TOKEN_AUTH=${SAPPORO_SERVICE_ENABLE_TOKEN_AUTH:-False} \
    docker-compose -f $DOCKER_COMPOSE_DEV_FILE up -d
  printf "\nPlease try:\n\n"
  echo "    $ curl -X GET localhost:${SAPPORO_SERVICE_PORT:-1122}/service-info"
  printf "\n"
  printf "Finish SAPPORO-service dev up...\n"
  exit 0
}

function service_dev_down() {
  check_docker
  check_docker_compose
  cd $SCRIPT_DIR/etc
  printf "Start SAPPORO-service dev down...\n"
  docker-compose -f $DOCKER_COMPOSE_DEV_FILE down
  printf "Finish SAPPORO-service dev down...\n"
  exit 0
}

function service_dev_clean() {
  printf "Start SAPPORO-service dev clean...\n"
  rm -rf $SCRIPT_DIR/log/app/*
  rm -rf $SCRIPT_DIR/run/*
  rm -rf $SCRIPT_DIR/src/app/secret_key.txt
  rm -rf $SCRIPT_DIR/src/app/token_list.txt
  find $SCRIPT_DIR/src -type d | grep pycache | xargs rm -rf
  printf "Finish SAPPORO-service dev clean...\n"
  exit 0
}

function service_dev_freeze() {
  check_docker
  printf "Start SAPPORO-service dev freeze...\n"
  docker run -d --rm \
    --workdir /opt/SAPPORO/SAPPORO-service/etc \
    -v $SCRIPT_DIR/etc/requirements.txt:/opt/SAPPORO/SAPPORO-service/etc/requirements.txt \
    -u $UID:$GID \
    --name sapporo-service-dev-freeze \
    python:slim \
    tail -f /dev/null
  docker exec \
    -u 0:0 \
    sapporo-service-dev-freeze \
    sh -c "
apt update &&
apt install -y build-essential curl iproute2 jq tree &&
pip install -U pip wheel setuptools
pip install $PIP_PACKAGES"
  docker exec \
    -u $UID:$GID \
    sapporo-service-dev-freeze \
    sh -c "
pip freeze > requirements.txt"
  docker kill sapporo-service-dev-freeze
  printf "Finish SAPPORO-service dev freeze...\n"
  exit 0
}

function service_dev_test() {
  check_docker
  printf "Start SAPPORO-service dev test...\n"
  mkdir -p $SCRIPT_DIR/etc/coverage_html
  DOCKER_IMAGE=$(grep "image: suecharo/sapporo-service" $DOCKER_COMPOSE_FILE | sed -e "s/    image: //g")
  docker run -d --rm \
    --workdir /opt/SAPPORO/SAPPORO-service/etc \
    -v $SCRIPT_DIR/etc:/opt/SAPPORO/SAPPORO-service/etc \
    -u $UID:$GID \
    --name sapporo-service-dev-test \
    $DOCKER_IMAGE \
    tail -f /dev/null
  docker exec \
    -u $UID:$GID \
    sapporo-service-dev-test \
    coverage run -m unittest discover /opt/SAPPORO/SAPPORO-service/src
  docker exec \
    -u $UID:$GID \
    sapporo-service-dev-test \
    coverage report
  docker exec \
    -u $UID:$GID \
    sapporo-service-dev-test \
    coverage html
  docker kill sapporo-service-dev-test
  printf "Finish SAPPORO-service dev test...\n"
  exit 0
}

function service_dev_build() {
  check_docker
  printf "Start SAPPORO-service dev build...\n"
  docker build --no-cache -t sucahro/sapporo-service:$1 .
  printf "Finish SAPPORO-service dev build...\n"
  exit 0
}

function service_dev() {
  if [[ $# == 0 ]]; then
    show_dev_usage
    exit 1
  fi

  while [[ $# > 0 ]]; do
    case $1 in
    "-h" | "--help")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_dev_usage
        exit 1
      fi
      show_dev_usage
      exit 0
      ;;
    "up")
      shift 1
      service_dev_up $@
      ;;
    "down")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_dev_usage
        exit 1
      fi
      service_dev_down
      ;;
    "clean")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_dev_usage
        exit 1
      fi
      service_dev_clean
      ;;
    "freeze")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_dev_usage
        exit 1
      fi
      service_dev_freeze
      ;;
    "build")
      shift 1
      if [[ $# -ne 1 ]]; then
        show_dev_usage
        exit 1
      fi
      service_dev_build $1
      ;;
    "test")
      shift 1
      if [[ $# -ne 0 ]]; then
        printf "[FATAL] Unexpected Option or Args: $1\n\n"
        show_dev_usage
        exit 1
      fi
      service_dev_test
      ;;
    -*)
      printf "[FATAL] Unexpected Option: $1\n\n"
      show_dev_usage
      exit 1
      ;;
    *)
      printf "[FATAL] Unexpected Args: $1\n\n"
      show_dev_usage
      exit 1
      ;;
    esac
  done
}

if [[ $# == 0 ]]; then
  show_base_usage
  exit 1
fi

while [[ $# > 0 ]]; do
  case $1 in
  "-h" | "--help")
    shift 1
    if [[ $# -ne 0 ]]; then
      printf "[FATAL] Unexpected Option or Args: $1\n\n"
      show_base_usage
      exit 1
    fi
    show_base_usage
    exit 0
    ;;
  "-v" | "--version")
    shift 1
    if [[ $# -ne 0 ]]; then
      printf "[FATAL] Unexpected Option or Args: $1\n\n"
      show_base_usage
      exit 1
    fi
    show_version
    exit 0
    ;;
  "up")
    shift 1
    service_up $@
    ;;
  "down")
    shift 1
    if [[ $# -ne 0 ]]; then
      printf "[FATAL] Unexpected Option or Args: $1\n\n"
      show_base_usage
      exit 1
    fi
    service_down
    ;;
  "clean")
    shift 1
    if [[ $# -ne 0 ]]; then
      printf "[FATAL] Unexpected Option or Args: $1\n\n"
      show_base_usage
      exit 1
    fi
    service_clean
    ;;
  "token")
    shift 1
    service_token $@
    ;;
  "dev")
    shift 1
    service_dev $@
    ;;
  -*)
    printf "[FATAL] Unexpected Option: $1\n\n"
    show_base_usage
    exit 1
    ;;
  *)
    printf "[FATAL] Unexpected Args: $1\n\n"
    show_base_usage
    exit 1
    ;;
  esac
done
